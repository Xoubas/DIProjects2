/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package peopleform;

import java.sql.Connection;
import conection.Conexion;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import javax.swing.table.TableModel;

/**
 *
 * @author stx
 */
public class Form extends javax.swing.JFrame {

    Conexion con1 = new Conexion();
    Connection conet;
    DefaultTableModel model;
    Statement st;
    ResultSet rs;

    /**
     * Creates new form Form
     */
    public Form() {
        initComponents();
        consultar();
        textId.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista = new javax.swing.JTable();
        textId = new javax.swing.JTextField();
        textNombre = new javax.swing.JTextField();
        textCiudad = new javax.swing.JTextField();
        labId = new javax.swing.JLabel();
        labNombre = new javax.swing.JLabel();
        labCiudad = new javax.swing.JLabel();
        butAñadir = new javax.swing.JButton();
        butBorrar = new javax.swing.JButton();
        butRefrescar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ex2-UD1");
        setPreferredSize(new java.awt.Dimension(646, 480));

        lista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Ciudad"
            }
        ));
        lista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lista);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );

        textId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textIdActionPerformed(evt);
            }
        });

        textNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textNombreActionPerformed(evt);
            }
        });

        labId.setText("Id:");

        labNombre.setText("Nombre: ");

        labCiudad.setText("Ciudad:");

        butAñadir.setText("Añadir");
        butAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butAñadirActionPerformed(evt);
            }
        });

        butBorrar.setText("Borrar");
        butBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butBorrarActionPerformed(evt);
            }
        });

        butRefrescar.setText("Refrescar");
        butRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butRefrescarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(butAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124)
                        .addComponent(butBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                        .addComponent(butRefrescar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labId)
                            .addComponent(labNombre)
                            .addComponent(labCiudad))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textId, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                            .addComponent(textNombre)
                            .addComponent(textCiudad)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(35, 35, 35))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {butAñadir, butBorrar, butRefrescar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labId))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labNombre))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labCiudad))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(butAñadir)
                    .addComponent(butBorrar)
                    .addComponent(butRefrescar))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textIdActionPerformed

    private void textNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textNombreActionPerformed

    private void butAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butAñadirActionPerformed
        insertar(textNombre.getText(), textCiudad.getText());
    }//GEN-LAST:event_butAñadirActionPerformed

    private void butBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butBorrarActionPerformed
        borrar();
    }//GEN-LAST:event_butBorrarActionPerformed

    private void listaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listaMouseClicked
        int row = lista.getSelectedRow();
        TableModel modelo = (DefaultTableModel) lista.getModel();
        Object[] contacto = new Object[3];
        textId.setText(modelo.getValueAt(row, 0).toString());
        textNombre.setText(modelo.getValueAt(row, 1).toString());
        textCiudad.setText(modelo.getValueAt(row, 2).toString());
    }//GEN-LAST:event_listaMouseClicked

    private void butRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butRefrescarActionPerformed
        limpiarTabla();
        limpiarTexto();
        consultar();
    }//GEN-LAST:event_butRefrescarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form().setVisible(true);
            }
        });
    }

    private void consultar() {
        String sql = "select * from contactos";
        try {
            conet = con1.getConexion();
            st = conet.createStatement();
            rs = st.executeQuery(sql);
            Object[] contacto = new Object[3];
            model = (DefaultTableModel) lista.getModel();
            while (rs.next()) {
                contacto[0] = rs.getInt("ID");
                contacto[1] = rs.getString("Nombre");
                contacto[2] = rs.getString("Ciudad");
                model.addRow(contacto);
            }
            lista.setModel(model);

        } catch (SQLException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void insertar(String nombre, String ciudad) {
        if (nombre.isEmpty() || ciudad.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe introducir un valor valido", "Aviso", JOptionPane.WARNING_MESSAGE);
            limpiarTexto();
        } else {
            try {
                // Con PreparedStatement para prevenir inyección SQL
                String sql = "insert into contactos (ID, Nombre, Ciudad) values(?, ?, ?)";
                conet = con1.getConexion();
                PreparedStatement pst = conet.prepareStatement(sql);

                pst.setInt(1, obtenerUltimoID() + 1);
                pst.setString(2, nombre);
                pst.setString(3, ciudad);
                pst.executeUpdate();

                // Añadir directamente al modelo sin necesidad de recargar todo
                Object[] nuevoContacto = {obtenerUltimoID(), nombre, ciudad}; // 'obtenerUltimoID' si necesitas manualmente
                model.addRow(nuevoContacto);
                limpiarTexto();
                JOptionPane.showMessageDialog(null, "Un nuevo contacto ha sido añadido", "Añadir", 2);
            } catch (SQLException ex) {
                Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void borrar() {
        int row = lista.getSelectedRow(); // Obtener la fila seleccionada

        if (row != -1) { // Verificar que se ha seleccionado una fila
            try {
                // Supongamos que la columna 0 de la tabla contiene el ID del contacto
                int idContacto = (int) model.getValueAt(row, 0); // Obtener el ID del contacto desde la tabla

                conet = con1.getConexion();
                PreparedStatement prep = conet.prepareStatement("DELETE FROM contactos WHERE ID=?");
                prep.setInt(1, idContacto); // Pasar el ID del contacto a eliminar
                int ps = prep.executeUpdate(); // Ejecutar la eliminación
                limpiarTabla();
                if (ps > 0) {
                    consultar(); // Refrescar la tabla después de eliminar el contacto
                    JOptionPane.showMessageDialog(rootPane, "Se ha borrado el contacto", "ÉXITO", 1);
                }

            } catch (SQLException ex) {
                Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            JOptionPane.showMessageDialog(null, "Selecciona una fila", "ERROR", 2);
        }
    }

    private void limpiarTabla() {
        for (int i = 0; i < lista.getRowCount(); i++) {
            model.removeRow(i);
            if (lista.getRowCount() > 0) {
                i = i - 1;
            }
        }
    }

    private void limpiarTexto() {
        textCiudad.setText("");
        textNombre.setText("");
        textId.setText("");
    }

    private int obtenerUltimoID() {
        int ultimoId = 0;
        String query = "SELECT MAX(ID) AS maxID from contactos";
        try {
            conet = con1.getConexion();
            st = conet.createStatement();
            rs = st.executeQuery(query);
            if (rs.next()) {
                ultimoId = rs.getInt("maxID");
            }
        } catch (SQLException ex) {
            Logger.getLogger(Form.class.getName()).log(Level.SEVERE, null, ex);
        }
        return ultimoId;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butAñadir;
    private javax.swing.JButton butBorrar;
    private javax.swing.JButton butRefrescar;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labCiudad;
    private javax.swing.JLabel labId;
    private javax.swing.JLabel labNombre;
    private javax.swing.JTable lista;
    private javax.swing.JTextField textCiudad;
    private javax.swing.JTextField textId;
    private javax.swing.JTextField textNombre;
    // End of variables declaration//GEN-END:variables
}
